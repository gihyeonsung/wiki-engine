I"8	<h1 id="함수형-사고">함수형 사고</h1>

<p>나는 간결한 표현과 코드를 재활용하기 쉬운 함수형 프로그래밍을 사랑한다. 그런데 함수형 프로그래밍이 좋고 멋지다는 걸 알다가도, 그게 뭔지 설명을 하려면 답답한 상황이었다. 그렇게 친숙하고 낯설게 함수형 프로그래밍을 하다가, 이 책에서 정답을 찾을 수 있을 것 같아서 읽게 되었다.</p>

<p>초반에는 통밀 프로그래밍을 하는 방법, 느긋한 평가, 멀티 패러다임 언어에서 함수형 프로그래밍을 하는 방법 그리고 OOP를 대체하는 법이 있었다. 통밀 프로그래밍과 느긋한 연산에 대한 설명을 볼 때는, 이미 알던 내용이 많아서, 복습하기 위해서 빠르게 읽고 넘겼다. 그리고 OOP와 함수형 프로그래밍을 설명하는 파트를 읽게 되었는데, 이해가 힘들었다. 내 OOP 이해와 경험이 부족해서, 완전히 책의 내용을 흡수하지 못한 것이 아쉬웠다.</p>

<h1 id="기억에-남는-말">기억에 남는 말</h1>

<blockquote>
  <p>함수형 자바 버전과 자바 8 버전의 차이가 단순한 문법 설탕이라고 생각할 수도 있지만, 사실상 그 이상이다. 하지만 문법적 설탕은 중요하다. 한 언어로 아이디어를 표현하는 방식이 곧 문법이기 때문이다.</p>
</blockquote>

<blockquote>
  <p>사용하는 추상화 단계보다 한 단계 아래를 이해하라.</p>
</blockquote>

<blockquote>
  <p>언어로 하여금 상태를 관리하게 하라.</p>
</blockquote>

<blockquote>
  <p>언어 설계자들은 반드시 규칙을 지킬 필요가 없기 때문에 그들이 만든 메커니즘이 항상 더 효율적이다.</p>
</blockquote>

<blockquote>
  <p>문제를 프로그램에 맞추지 말고, 프로그램을 문제에 맞게끔 조정해가라.</p>
</blockquote>

<blockquote>
  <p>함수형 프로그래머들도 코드를 재사용하고 싶어 하지만 그들은 다른 빌딩블록을 사용한다. 함수형 프로그래밍은 구조물들 간에 잘 알려진 관계(커플링)를 만들기보다는, 큰 단위의 재사용 메커니즘을 추출하려 한다. 이런 노력은 객체 간의 관계(모피즘)를 규정하는 수학의 한 분야인 카테고리 이론에 근거를 둔다.</p>
</blockquote>

:ET